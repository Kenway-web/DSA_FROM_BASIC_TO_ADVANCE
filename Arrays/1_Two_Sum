1. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


Approaches:
1 ->  You could solve it using O(N^2) by using two for loops 

2 Better Approach -> Use heap and use this logic diff=target-nums[i]
if diff already exist means you have got the sum and you are good to go take those indices out of the array.

class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        // two for loops 
        // for i to n-1;
             // for j=i+1 to n


        // SECOND WAY: USE HASMAP

       int arr[] = {-1, -1};
        HashMap<Integer,Integer> map=new HashMap<>();

        int n=nums.length;

        for(int i=0;i<n;i++)
        {
            int diff=target-nums[i];

            if(map.containsKey(diff)){
                arr[0]=map.get(diff);
                arr[1]=i;
                return arr;
            }  
            else{
                map.put(nums[i],i);
            }  
        }      

        return arr;

    }